
function cal_to_jd(b, a, c, d, e, g, h) { var j; if (0 == a) return alert("There is no year 0 in the Julian system!"), "invalid"; if (1582 == a && 10 == c && 4 < d && 15 > d) return alert("The dates 5 through 14 October, 1582, do not exist in the Gregorian system!"), "invalid"; "BCE" == b && (a = -a + 1); 2 < c ? (j = a, b = c + 1) : (j = a - 1, b = c + 13); b = Math.floor(Math.floor(365.25 * j) + Math.floor(30.6001 * b) + d + 1720995); 588829 <= d + 31 * (c + 12 * a) && (a = Math.floor(0.01 * j), b += 2 - a + Math.floor(0.25 * a)); e = e / 24 - 0.5; 0 > e && (e += 1, --b); g = 1E5 * (b + (e + (g + h / 60) / 60 / 24)); h = Math.floor(g); 0.5 < g - h && ++h; return h / 1E5 } function julianToGregorian(b) { var a, c, d, e; c = Math.floor(b); 2299161 <= c ? (a = Math.floor((c - 1867216 - 0.25) / 36524.25), a = c + 1 + a - Math.floor(0.25 * a)) : a = c; b = b - c + 0.5; 1 <= b && (b -= 1, ++a); a += 1524; c = Math.floor(6680 + (a - 2439870 - 122.1) / 365.25); d = Math.floor(365.25 * c); e = Math.floor((a - d) / 30.6001); a = Math.floor(a - d - Math.floor(30.6001 * e)); e = Math.floor(e - 1); 12 < e && (e -= 12); c = Math.floor(c - 4715); 2 < e && --c; 0 >= c && --c; d = Math.floor(24 * b); f = 60 * (60 * (24 * b - d) - Math.floor(60 * (24 * b - d))); f -= Math.floor(f); b = {}; b.month = e; b.day = a; 0 > c ? (c = -c, b.era = "BC") : b.era = "AD"; b.year = c; return b } function JDcalc(b) { for (var a, c = 0; c < b.era.length; ++c) if (b.era[c].checked) { a = b.era[c].value; break } for (var d, c = 0; c < b.calctype.length; ++c) if (b.calctype[c].checked) { d = b.calctype[c].value; break } if ("JD" == d) { for (var e, c = 0; c < b.month.length; ++c) if (b.month[c].selected) { e = c + 1; break } for (var g, c = 1; c <= b.day.length; ++c) if (b.day[c - 1].selected) { g = c; break } d = parseFloat(b.year.value); var c = parseFloat(b.hour.value), h = parseFloat(b.minute.value), j = parseFloat(b.second.value); 0 > d && (d = -d, a = "BCE", b.year.value = d, b.era[1].checked = !0); b.JDedit.value = cal_to_jd(a, d, e, g, c, h, j) } else jd_to_cal(b.JDedit.value, b); a = parseFloat(b.JDedit.value) + 0.5; b.wkday.value = "Monday Tuesday Wednesday Thursday Friday Saturday Sunday".split(" ")[Math.floor(7 * (a / 7 - Math.floor(a / 7)) + 3.17E-10)] } var month = "January February March April May June July August September October November December".split(" "), numdays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; function ModifiedDate() { updated = new Date(document.lastModified); Month = month[updated.getMonth()]; Day = updated.getDate(); Year = updated.getYear(); Hour = updated.getHours(); Min = updated.getMinutes(); 2E3 > Year && (Year += 1900); 2E3 > Year && (Year += 100); 10 > Hour && (Hour = "0" + Hour); 10 > Min && (Min = "0" + Min); document.write("Last modified " + Month + " " + Day + ", " + Year + " at " + Hour + ":" + Min) } function set_form_fields(b) { var a = new Date, c = a.getYear(); 2E3 > c && (c += 1900); 2E3 > c && (c += 100); var d = a.getMonth(), e = a.getDate(), g = a.getHours(), h = a.getMinutes(), j = a.getSeconds(), a = a.getTimezoneOffset() / 60, g = g + a; 24 <= g && (g -= 24, ++e, e > numdays[d - 1] && (e = 1, ++d, 11 < d && (d -= 12, ++c))); b.year.value = c; for (k = 0; k < b.month.length; ++k) if (k == d) { b.month[k].selected = !0; break } b.day.value = e; for (k = 1; k <= b.day.length; ++k) if (k == e) { b.day[k - 1].selected = !0; break } b.hour.value = g; b.minute.value = h; b.second.value = j; doJD(b) } function dodate(b) { for (k = 0; k < b.calctype.length; ++k) if ("date" == b.calctype[k].value) { b.calctype[k].checked = !0; break } } function doJD(b) { for (k = 0; k < b.calctype.length; ++k) if ("JD" == b.calctype[k].value) { b.calctype[k].checked = !0; break } } (function (b) { b.fn.repeatButton = function (a, c, d) { return this.each(function () { function e() { g = setInterval(d, c) } var g, h; b(this).mousedown(function () { d(); h = setTimeout(e, a) }).mouseup(function () { clearInterval(g); clearTimeout(h) }).mouseout(function () { clearInterval(g); clearTimeout(h) }) }) }; b.idleTimer = function (a, c, d) { d = b.extend({ startImmediately: !0, idle: !1, enabled: !0, timeout: 3E4, events: "mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove" }, d); c = c || document; var e = function (a) { "number" === typeof a && (a = void 0); a = b.data(a || c, "idleTimerObj"); a.idle = !a.idle; var g = +new Date - a.olddate; a.olddate = +new Date; a.idle && g < d.timeout ? (a.idle = !1, clearTimeout(b.idleTimer.tId), d.enabled && (b.idleTimer.tId = setTimeout(e, d.timeout))) : (a = jQuery.Event(b.data(c, "idleTimer", a.idle ? "idle" : "active") + ".idleTimer"), b(c).trigger(a)) }, g = b.data(c, "idleTimerObj") || {}; g.olddate = g.olddate || +new Date; if ("number" === typeof a) d.timeout = a; else { if ("destroy" === a) return a = c, g = b.data(a, "idleTimerObj") || {}, g.enabled = !1, clearTimeout(g.tId), b(a).off(".idleTimer"), this; if ("getElapsedTime" === a) return +new Date - g.olddate } b(c).on(b.trim((d.events + " ").split(" ").join(".idleTimer ")), function () { var a = b.data(this, "idleTimerObj"); clearTimeout(a.tId); a.enabled && (a.idle && e(this), a.tId = setTimeout(e, a.timeout)) }); g.idle = d.idle; g.enabled = d.enabled; g.timeout = d.timeout; d.startImmediately && (g.tId = setTimeout(e, g.timeout)); b.data(c, "idleTimer", "active"); b.data(c, "idleTimerObj", g) }; b.fn.idleTimer = function (a, c) { c || (c = {}); this[0] && b.idleTimer(a, this[0], c); return this }; b.fn.ellipsisFill = function (a) { return this.each(function () { var c = b(this); c.empty(); c.spanElem = b('<span title="' + a + '"></span>'); c.append(c.spanElem); c.css("overflow", "hidden"); c.spanElem.css("white-space", "nowrap"); c.spanElem.html(a); if (c.spanElem.width() > c.width()) for (var d; c.spanElem.width() > c.width() ;) { var e = c.spanElem.html(), e = e.substring(0, e.lastIndexOf(" ")) + "&hellip;"; if (e == d) break; c.spanElem.html(e); d = e } }) }; b.fn.ellipsisFixed = function (a, c) { return this.each(function () { var d = b(this), e = d.text(); d.empty(); var g = b("<span></span>"), h = b('<a href="#" title="more" class="ellipsis"></a>'); c ? h.html(c) : h.html("&hellip;"); h.click(function (a) { a.preventDefault(); a = b(this); g.html(e); a.remove() }); if (e.length > a) { var j = e.substr(0, a), j = j.substr(0, Math.min(j.length, j.lastIndexOf(" "))); g.html(j + "&nbsp;"); g.append(h) } else g.html(e); d.append(g) }) }; b.fn.toggleExpandText = function (a) { return this.each(function () { var c = b(this), d = c.text(); if (!(a > d.length)) { var e = !1, g = d.substr(0, a), g = g.substr(0, Math.min(g.length, g.lastIndexOf(" "))); c.toggle = function () { c.empty(); var a = b('<a href="#" class="toggle"></a>'); e ? (c.html(d + "&nbsp;"), a.text("less")) : (c.html(g + "&nbsp;"), a.text("more")); a.one("click", function (a) { a.preventDefault(); c.toggle() }); e = !e; c.append(a) }; c.toggle() } }) }; b.fn.ellipsis = function (a) { return this.each(function () { var c = b(this), d = c.text(); d.length > a && (d = d.substr(0, a), d = d.substr(0, Math.min(d.length, d.lastIndexOf(" "))), c.empty().html(d + "&hellip;")) }) } })(jQuery); window.log = function () { log.history = log.history || []; log.history.push(arguments); this.console && console.log(Array.prototype.slice.call(arguments)) }; String.format = function () { for (var b = arguments[0], a = 0; a < arguments.length - 1; a++) b = b.replace(RegExp("\\{" + a + "\\}", "gm"), arguments[a + 1]); return b }; String.prototype.startsWith = function (b) { return 0 == this.indexOf(b) }; String.prototype.trim = function () { return this.replace(/^\s\s*/, "").replace(/\s\s*$/, "") }; String.prototype.ltrim = function () { return this.replace(/^\s+/, "") }; String.prototype.rtrim = function () { return this.replace(/\s+$/, "") }; String.prototype.fulltrim = function () { return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g, "").replace(/\s+/g, " ") }; String.prototype.toFileName = function () { return this.replace(/[^a-z0-9]/gi, "_").toLowerCase() }; function ellipsis(b, a) { if (b.length <= a) return b; var c = b.substr(0, a), c = c.substr(0, Math.min(c.length, c.lastIndexOf(" "))); return c + "&hellip;" } function numericalInput(b) { if (!(46 == b.keyCode || 8 == b.keyCode || 9 == b.keyCode || 27 == b.keyCode || 65 == b.keyCode && !0 === b.ctrlKey || 35 <= b.keyCode && 39 >= b.keyCode)) if (b.shiftKey || (48 > b.keyCode || 57 < b.keyCode) && (96 > b.keyCode || 105 < b.keyCode)) return b.preventDefault(), !1; return !0 } function clamp(b, a, c) { return Math.min(Math.max(b, a), c) } function roundNumber(b, a) { return Math.round(b * Math.pow(10, a)) / Math.pow(10, a) } function normalise(b, a, c) { return (b - a) / (c - a) } function fitRect(b, a, c, d) { var e = a / b, g = d / c, h, j; e < g && (c /= b, h = b * c, j = a * c); g < e && (c = d / a, h = b * c, j = a * c); return { width: Math.floor(h), height: Math.floor(j) } } Array.prototype.indexOf || (Array.prototype.indexOf = function (b, a) { for (var c = a || 0, d = this.length; c < d; c++) if (this[c] === b) return c; return -1 }); function getTimeStamp() { return (new Date).getTime() } function getParameterByName(b) { b = b.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); b = RegExp("[\\?&]" + b + "=([^&#]*)").exec(window.location.search); return null == b ? "" : decodeURIComponent(b[1].replace(/\+/g, " ")) } function getUrlParts(b) { var a = document.createElement("a"); a.href = b; return { href: a.href, host: a.host, hostname: a.hostname, port: a.port, pathname: a.pathname, protocol: a.protocol, hash: a.hash, search: a.search } } function convertToRelativeUrl(b) { b = getUrlParts(b); b = b.pathname + b.search; b.startsWith("/") || (b = "/" + b); return b } "function" !== typeof Object.create && (Object.create = function (b) { var a = function () { }; a.prototype = b; return new a }); Object.size = function (b) { var a = 0, c; for (c in b) b.hasOwnProperty(c) && a++; return a }; function debounce(b, a) { a = a || 100; return function () { if (!b.debouncing) { var c = Array.prototype.slice.apply(arguments); b.lastReturnVal = b.apply(window, c); b.debouncing = !0 } clearTimeout(b.debounceTimeout); b.debounceTimeout = setTimeout(function () { b.debouncing = !1 }, a); return b.lastReturnVal } } function getMaxZIndex() { return Math.max.apply(null, $.map($("body > *"), function (b) { if ("absolute" == $(b).css("position")) return parseInt($(b).css("z-index")) || 1 })) } function BaseProvider() { this.options = { dataUriTemplate: "{0}{1}.js" }; this.load = function () { this.data = this.options.data } } WellcomeTimelineProvider.prototype = new BaseProvider; WellcomeTimelineProvider.prototype.constructor = WellcomeTimelineProvider; function WellcomeTimelineProvider(b) { $.extend(this.options, b, { provider: this, maxTicks: 100, maxYearIntervalWidth: 500, maxDecadeIntervalWidth: 2E3, maxCenturyIntervalWidth: 500, zoomAnimationDuration: 1E3, eventFadeDuration: 500, zoomFactor: 3, eventStackSize: 3, padding: 0 }); this.create = function (a) { $.extend(this.options, a); this.load(); this.options.element.timeline(this.options) }; this.getTimelineStartDate = function () { return this.getDate(this.data.EarliestJulianDay).add("years", -1 * this.options.padding) }; this.getTimelineEndDate = function () { return this.getDate(this.data.LastJulianDay).add("years", this.options.padding) }; this.setEventStartDate = function (a) { a.startDate = this.getDate(a.JulianDayStart) }; this.setEventEndDate = function (a) { a.endDate = 0 > a.JulianDayEnd ? this.getDate(a.JulianDayStart) : this.getDate(a.JulianDayEnd) }; this.getDate = function (a) { a = julianToGregorian(a); return moment(new Date(a.year, a.month - 1, a.day)) }; this.remove = function () { } } (function (b) { b.widget("wellcome.timeline_baseTimeline", { currentIndex: -1, isFullScreen: !1, _create: function () { var a = this; b.wellcome.timeline = a; a.provider = a.options.provider; a.RESIZE = "onResize"; a.TOGGLE_FULLSCREEN = "onToggleFullScreen"; a.ZOOM_IN = "onZoomIn"; a.ZOOM_OUT = "onZoomOut"; a.START_ZOOM = "onStartZoom"; a.FINISH_ZOOM = "onFinishZoom"; a.START_SCROLL = "onStartScroll"; a.SCROLL_STEP = "onScrollStep"; a.FINISH_SCROLL = "onFinishScroll"; a.START_NAVIGATING = "onStartNavigating"; a.FINISH_NAVIGATING = "onFinishNavigating"; a.START_INDEX_CHANGE = "onStartIndexChange"; a.FINISH_INDEX_CHANGE = "onFinishIndexChange"; a.SHOW_GENERIC_DIALOGUE = "onShowGenericDialogue"; a.HIDE_GENERIC_DIALOGUE = "onHideGenericDialogue"; a.SHOW_EMBED_DIALOGUE = "onShowEmbedDialogue"; a.HIDE_EMBED_DIALOGUE = "onHideEmbedDialogue"; a.SHOW_HELP_DIALOGUE = "onShowHelpDialogue"; a.HIDE_HELP_DIALOGUE = "onHideHelpDialogue"; a.SHOW_EVENT_DETAILS_DIALOGUE = "onShowEventDetailsDialogue"; a.HIDE_EVENT_DETAILS_DIALOGUE = "onHideEventDetailsDialogue"; a.RETURN = "onReturn"; a.ESCAPE = "onEscape"; a.REDIRECT = "onRedirect"; a.CLOSE_ACTIVE_DIALOGUE = "onCloseActiveDialogue"; a.REFRESHED = "onRefreshed"; b.wellcome.timeline.bind(b.wellcome.timeline.ESCAPE, function () { a.isFullScreen && a._toggleFullScreen() }); a.socket = new easyXDM.Socket({ onMessage: function (c) { c = b.parseJSON(c); a.handleParentFrameEvent(c) } }); b(window).resize(function () { a._resize() }); b(window).bind("unload", function () { }); a.options.isHomeDomain || a.element.addClass("embedded"); b(document).keyup(function (b) { 27 === b.keyCode && a._trigger(a.ESCAPE); 13 === b.keyCode && a._trigger(a.RETURN) }); b(document).mousemove(function (b) { a.mouseX = b.pageX; a.mouseY = b.pageY }); a.options.isHomeDomain || trackVariable(2, "Timeline Embedded", a.options.url, 2) }, changeIndex: function (a) { if (!(-1 > a) && !(a > this.provider.data.Events.length - 1)) { this.lastIndex = this.currentIndex; this._deselectCurrentEvent(); this.currentIndex = a; this._trigger(this.START_INDEX_CHANGE, a); this._trigger(this.SHOW_EVENT_DETAILS_DIALOGUE); var c = "0"; -1 != a && (c = b.wellcome.timeline.getEventByIndex(a).EventId); this.setAddress(c) } }, viewEvent: function (a) { for (var b = this, d = 0, e = b.provider.data.Events.length; d < e; d++) if (b.provider.data.Events[d].EventId == a) { setTimeout(function () { b.changeIndex(d) }, 100); break } }, getView: function (a) { return this.element.timeline_shell("getView", a) }, getAbsoluteUrl: function () { return b.address.baseURL() + "#" + b.address.path() }, getRelativeUrl: function () { var a = this.getAbsoluteUrl(), a = getUrlParts(a).pathname + "#" + b.address.path(); a.startsWith("/") || (a = "/" + a); return a }, updateAddress: function () { if (this.urlParamsEnabled()) { for (var a = Array.prototype.slice.call(arguments), c = b.address.pathNames(), d = Math.max(a.length, c.length), e = Array(d), g = 0; g < c.length; g++) e[g] = c[g]; for (g = 0; g < a.length; g++) e[g] = a[g]; a = "#"; for (g = 0; g < d; g++) a += e[g], g != d - 1 && (a += "/"); this.updateParentHash(a) } }, setAddress: function () { if (this.urlParamsEnabled()) { for (var a = Array.prototype.slice.call(arguments), b = "#", d = 0; d < a.length; d++) b += a[d], d != a.length - 1 && (b += "/"); this.updateParentHash(b) } }, updateParentHash: function (a) { var b = window.parent.document.URL; -1 != b.indexOf("#") && (b = b.substr(0, b.indexOf("#"))); window.parent.document.location.replace(b + a) }, bind: function (a, b) { this.element.bind(a, b) }, _trigger: function (a, b) { this.element.trigger(a, b) }, triggerSocket: function (a, b) { this.socket && this.socket.postMessage(JSON.stringify({ eventName: a, eventObject: b })) }, handleParentFrameEvent: function (a) { switch (a.eventName) { case this.TOGGLE_FULLSCREEN: this._trigger(this.TOGGLE_FULLSCREEN, a.eventObject) } }, _resize: function () { this.options.enforceMinWidth ? b(window).width() >= this.options.minWidth && this._trigger(this.RESIZE) : this._trigger(this.RESIZE) }, redirect: function (a) { this.triggerSocket(this.REDIRECT, a) }, isEmbedEnabled: function () { return "false" !== this.options.config.Settings.EmbedEnabled }, urlParamsEnabled: function () { return "false" !== this.options.isHomeDomain && "false" !== this.options.isOnlyInstance }, _toggleFullScreen: function () { this.isFullScreen = !this.isFullScreen; this.triggerSocket(this.TOGGLE_FULLSCREEN, this.isFullScreen) }, closeActiveDialogue: function () { this._trigger(this.CLOSE_ACTIVE_DIALOGUE) }, showDialogue: function (a, b) { this._trigger(this.SHOW_GENERIC_DIALOGUE, { message: a, acceptCallback: b }) }, embed: function () { this._trigger(this.SHOW_EMBED_DIALOGUE) }, help: function () { this._trigger(this.SHOW_HELP_DIALOGUE) } }) })(jQuery); (function (b) { b.widget("wellcome.wellcomeTimeline", { options: {}, _create: function () { var a = this; b.getJSON(a.options.configUri, function (c) { a.config = c; b.getJSON(a.options.dataUri, function (b) { a.data = b; a._viewPackage() }) }) }, _viewPackage: function () { this._reset(); this.options.provider.create({ element: this.element, baseUri: this.options.baseUri, timelineId: this.options.timelineId, dataUriTemplate: this.options.dataUriTemplate, dataUri: this.options.dataUri, eventId: this.options.eventId, data: this.data, config: this.config, embedScriptUri: this.options.embedScriptUri, isHomeDomain: this.options.isHomeDomain, isOnlyInstance: this.options.isOnlyInstance, url: this.options.url }) }, _reset: function () { this.element.empty(); this.options.provider.remove() }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline", b.wellcome.timeline_baseTimeline, { _create: function () { var a = this; b.wellcome.timeline_baseTimeline.prototype._create.call(a); a.element.timeline_shell({ onCloseActiveDialogue: function () { b.wellcome.timeline.closeActiveDialogue() } }); a.headerPanelView = a.getView("header"); a.headerPanelView.timeline_headerPanelView({ onZoomIn: function () { a._trigger(a.ZOOM_IN) }, onZoomOut: function () { a._trigger(a.ZOOM_OUT) } }); a.mainPanelView = a.getView("main"); a.mainPanelView.timeline_mainPanelView({ onSelectEvent: function (b, d) { "object" == typeof d && (d = 0); a.changeIndex(d) }, onSelectEventComplete: function (b, d) { "object" == typeof d && (d = 0); a._trigger(a.FINISH_INDEX_CHANGE, d) }, onStartZoom: function () { a._trigger(a.START_ZOOM) }, onFinishZoom: function () { a._trigger(a.FINISH_ZOOM) }, onStartScroll: function (b, d) { a._trigger(a.START_SCROLL, d) }, onScrollStep: function (b, d) { a._trigger(a.SCROLL_STEP, { direction: d.direction, pos: d.pos }) }, onFinishScroll: function (b, d) { a._trigger(a.FINISH_SCROLL, d) }, onStartNavigating: function () { a._trigger(a.START_NAVIGATING) }, onFinishNavigating: function () { a._trigger(a.FINISH_NAVIGATING) }, onRefreshed: function () { a._trigger(a.REFRESHED) } }); a.footerPanelView = a.getView("footer"); a.footerPanelView.timeline_footerPanelView({ onToggleFullScreen: function () { a._toggleFullScreen() }, onEmbed: function () { a.embed() } }); a.detailsView = a.getView("details"); a.detailsView.timeline_detailsView({ onClose: function () { a._deselectCurrentEvent(); a._trigger(a.HIDE_EVENT_DETAILS_DIALOGUE) }, onSelectPrev: function () { a.changeIndex(a.currentIndex - 1) }, onSelectNext: function () { a.changeIndex(a.currentIndex + 1) } }); a.genericDialogueView = a.getView("genericDialogue"); a.genericDialogueView.timeline_genericDialogueView({ onClose: function () { a._trigger(a.HIDE_GENERIC_DIALOGUE) }, onAccept: function () { a._trigger(a.HIDE_GENERIC_DIALOGUE) } }); a.embedView = a.getView("embed"); a.embedView.timeline_embedView({ onClose: function () { a._trigger(a.HIDE_EMBED_DIALOGUE) } }); a._resize(); a._getParams() }, _getParams: function () { if (this.urlParamsEnabled()) { b.address.history(!0); var a = b.address.pathNames(); a.length && (a = Number(a[0]), 0 != a && this.viewEvent(a)) } else this.options.eventId && this.viewEvent(this.options.eventId) }, _deselectCurrentEvent: function () { this.currentIndex = -1; this.element.find(".event").removeClass("selected"); this.element.find(".tickEvent").removeClass("selected") }, getCurrentEvent: function () { return -1 == this.currentIndex ? null : this.getEventByIndex(this.currentIndex) }, getEventByIndex: function (a) { return this.provider.data.Events[a] }, _init: function () { }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_shell", { options: {}, view: function (a, b) { this.name = a; this.element = b }, views: [], _create: function () { var a = this; b.wellcome.timeline.bind(b.wellcome.timeline.RESIZE, function () { a._resize() }); b.wellcome.timeline.bind(b.wellcome.timeline.SHOW_EVENT_DETAILS_DIALOGUE, function () { }); b.wellcome.timeline.bind(b.wellcome.timeline.HIDE_EVENT_DETAILS_DIALOGUE, function () { }); b.wellcome.timeline.bind(b.wellcome.timeline.SHOW_EMBED_DIALOGUE, function () { a.overlayMaskElem.show() }); b.wellcome.timeline.bind(b.wellcome.timeline.HIDE_EMBED_DIALOGUE, function () { a.overlayMaskElem.hide() }); a.containerElem = a.element; a.headerPanelElem = b('<div class="headerPanel"></div>'); a.containerElem.append(a.headerPanelElem); a.views.push(new a.view("header", a.headerPanelElem)); a.mainPanelElem = b('<div class="mainPanel"></div>'); a.containerElem.append(a.mainPanelElem); a.views.push(new a.view("main", a.mainPanelElem)); a.footerPanelElem = b('<div class="footerPanel"></div>'); a.containerElem.append(a.footerPanelElem); a.views.push(new a.view("footer", a.footerPanelElem)); a.detailsViewElem = b('<div class="overlay detailsView"></div>'); a.containerElem.append(a.detailsViewElem); a.views.push(new a.view("details", a.detailsViewElem)); a.overlayMaskElem = b('<div class="overlayMask"></div>'); a.containerElem.append(a.overlayMaskElem); a.helpViewElem = b('<div class="overlay helpView"></div>'); a.containerElem.append(a.helpViewElem); a.views.push(new a.view("help", a.helpViewElem)); a.genericDialogueViewElem = b('<div class="overlay genericDialogueView"></div>'); a.containerElem.append(a.genericDialogueViewElem); a.views.push(new a.view("genericDialogue", a.genericDialogueViewElem)); a.embedViewElem = b('<div class="overlay embedView"></div>'); a.containerElem.append(a.embedViewElem); a.views.push(new a.view("embed", a.embedViewElem)); a.overlayMaskElem.hide(); a.overlayMaskElem.click(function (b) { b.preventDefault(); a._trigger("onCloseActiveDialogue") }) }, _toggleFullScreen: function () { var a = b(window); this.containerElem.width(a.width()); this.containerElem.height(a.height()) }, _resize: function () { var a = b(window), c = a.width(), a = a.height(); this.containerElem.width(c); this.containerElem.height(a); var d = a - this.headerPanelElem.outerHeight(!0) - this.footerPanelElem.outerHeight(!0); this.mainPanelElem.height(d); d = this.headerPanelElem.height() + this.mainPanelElem.find("#scroll").height(); d = a - this.footerPanelElem.height() < d + this.detailsViewElem.height() ? a / 2 - this.detailsViewElem.height() / 2 : d; this.detailsViewElem.css({ top: d, left: c / 2 - this.detailsViewElem.width() / 2 }); this.overlayMaskElem.width(c); this.overlayMaskElem.height(a); this._centerView(a, c, this.genericDialogueViewElem); this.embedViewElem.css({ top: a - this.embedViewElem.outerHeight(!0) }) }, _centerView: function (a, b, d) { d.css({ top: a / 2 - d.height() / 2, left: b / 2 - d.width() / 2 }) }, getView: function (a) { for (var b = 0; b < this.views.length; b++) { var d = this.views[b]; if (d.name.toLowerCase() == a.toLowerCase()) return d.element } return null }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_headerPanelView", { isZoomInEnabled: !0, isZoomOutEnabled: !0, isNavigating: !1, _create: function () { var a = this; b.wellcome.timeline.bind(b.wellcome.timeline.RESIZE, function () { a._resize() }); b.wellcome.timeline.bind(b.wellcome.timeline.START_ZOOM, function () { a._disableZoomIn(); a._disableZoomOut() }); b.wellcome.timeline.bind(b.wellcome.timeline.FINISH_ZOOM, function () { a._refresh() }); b.wellcome.timeline.bind(b.wellcome.timeline.START_SCROLL, function () { a._disableZoomIn(); a._disableZoomOut() }); b.wellcome.timeline.bind(b.wellcome.timeline.START_NAVIGATING, function () { a.isNavigating = !0 }); b.wellcome.timeline.bind(b.wellcome.timeline.FINISH_NAVIGATING, function () { a.isNavigating = !1 }); b.wellcome.timeline.bind(b.wellcome.timeline.REFRESHED, function () { a._refresh() }); a.leftColElem = b('<div class="leftCol"></div>'); a.element.append(a.leftColElem); a.titleElem = b('<div class="title"></div>'); a.leftColElem.append(a.titleElem); a.rightColElem = b('<div class="rightCol"></div>'); a.element.append(a.rightColElem); a.zoomOutButtonElem = b('<div class="zoomOut"></div>'); a.rightColElem.append(a.zoomOutButtonElem); a.zoomInButtonElem = b('<div class="zoomIn"></div>'); a.rightColElem.append(a.zoomInButtonElem); a.title = b.wellcome.timeline.options.provider.data.Title; a.title += ": <span>" + b.wellcome.timeline.provider.data.StartDateDisplay + " - " + b.wellcome.timeline.provider.data.EndDateDisplay + "</span>"; a.titleElem.ellipsisFill(a.title); a.zoomInButtonElem.prop("title", b.wellcome.timeline.options.config.HeaderPanelView.ZoomIn); a.zoomOutButtonElem.prop("title", b.wellcome.timeline.options.config.HeaderPanelView.ZoomOut); a.zoomInButtonElem.on("click", function (b) { b.preventDefault(); a.isZoomInEnabled && a._trigger("onZoomIn") }); a.zoomOutButtonElem.on("click", function (b) { b.preventDefault(); a.isZoomOutEnabled && a._trigger("onZoomOut") }) }, _disableZoomIn: function () { this.isZoomInEnabled = !1; this.zoomInButtonElem.fadeTo(0, 0.5) }, _enableZoomIn: function () { this.isZoomInEnabled = !0; this.zoomInButtonElem.fadeTo(0, 1) }, _disableZoomOut: function () { this.isZoomOutEnabled = !1; this.zoomOutButtonElem.fadeTo(0, 0.5) }, _enableZoomOut: function () { this.isZoomOutEnabled = !0; this.zoomOutButtonElem.fadeTo(0, 1) }, _resize: function () { var a = this.element.width() - this.rightColElem.width(); this.leftColElem.width(a); this.titleElem.ellipsisFill(this.title) }, _refresh: function () { this.isNavigating || (b.wellcome.timeline.isMinZoom ? this._disableZoomOut() : this._enableZoomOut(), b.wellcome.timeline.isMaxZoom ? this._disableZoomIn() : this._enableZoomIn()) }, _init: function () { }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_mainPanelView", { currentZoomLevel: 0, lastZoomLevel: null, hasZoomed: !1, isZooming: !1, isNavigating: !1, days: 0, years: 0, decades: 0, centuries: 0, yearTicks: { elem: null, ticks: [] }, decadeTicks: { elem: null, ticks: [] }, centuryTicks: { elem: null, ticks: [] }, _create: function () { var a = this; b.wellcome.timeline.bind(b.wellcome.timeline.RESIZE, function () { a._resize() }); b.wellcome.timeline.bind(b.wellcome.timeline.ZOOM_IN, function () { a._zoomIn() }); b.wellcome.timeline.bind(b.wellcome.timeline.ZOOM_OUT, function () { a._zoomOut() }); b.wellcome.timeline.bind(b.wellcome.timeline.START_INDEX_CHANGE, function (b, d) { -1 != d && a._navigateToEvent(a.events[d]) }); a.scrollElem = b('<div id="scroll"></div>'); a.element.append(a.scrollElem); a.contentElem = b('<div class="content"></div>'); a.scrollElem.append(a.contentElem); a.backgroundEventsElem = b('<div class="backgroundEvents"></div>'); a.contentElem.append(a.backgroundEventsElem); a.eventsElem = b('<div class="events"></div>'); a.contentElem.append(a.eventsElem); a.timeElem = b('<div class="time"></div>'); a.contentElem.append(a.timeElem); a.yearTicksElem = b('<div class="ticks years"></div>'); a.timeElem.append(a.yearTicksElem); a.decadeTicksElem = b('<div class="ticks decades"></div>'); a.timeElem.append(a.decadeTicksElem); a.centuryTicksElem = b('<div class="ticks centuries"></div>'); a.timeElem.append(a.centuryTicksElem); a.backgroundEventTemplateElem = b('                <div class="event">                    <div class="title"></div>                    <div class="timeSpan"></div>                </div>'); a.eventTemplateElem = b('                <div class="event">                    <div class="wrap">                        <div class="leftCol"><img /></div>                        <div class="rightCol">                            <div class="date"></div>                            <div class="title"></div>                        </div>                    </div>                    <div class="arrow"></div>                    <div class="line"></div>                </div>'); a.tickTemplateElem = b('                <div class="tick">                    <div class="date"></div>                    <div class="events"></div>                </div>'); a.tickEventTemplateElem = b('<div class="tickEvent"></div>') }, _init: function () { this.scroll = new iScroll("scroll", { hScrollbar: !1, vScrollbar: !1, hideScrollbar: !0 }); b(this.scroll.scroller).on("selectstart", function () { return !1 }); this.yearTicksElem.hide(); this.decadeTicksElem.hide(); this.centuryTicksElem.hide(); this.backgroundEvents = b.wellcome.timeline.provider.data.BackgroundEvents; this.events = b.wellcome.timeline.provider.data.Events; var a = b.wellcome.timeline.provider.getTimelineStartDate(), c = b.wellcome.timeline.provider.getTimelineEndDate(); c.year() == a.year() ? (a = moment(new Date(a.year(), 1, 1)), c = a.add("years", 1).subtract("days", 1)) : 10 > c.year() - a.year() ? (a = moment(new Date(a.year(), 1, 1)), c = moment(new Date(c.year(), 1, 1)).add("years", 1).subtract("days", 1)) : 100 > c.year() - a.year() ? (a = this._getDecade(a), a = moment(new Date(a, 1, 1)), c = this._getDecade(c), c = moment(new Date(c, 1, 1)).add("years", 10).subtract("days", 1)) : (a = this._getCentury(a), a = moment(new Date(a, 1, 1)), c = this._getCentury(c), c = moment(new Date(c, 1, 1)).add("years", 100).subtract("days", 1)); this.startDate = a; this.endDate = c; this.days = this.endDate.diff(this.startDate, "days"); this.years = this.endDate.diff(this.startDate, "years"); this.decades = Math.floor(this.years / 10); this.centuries = Math.floor(this.years / 100); this._createBackgroundEvents(); this._createEvents(); this._createTicks() }, _createBackgroundEvents: function () { var a, c, d; a = 0; for (c = this.backgroundEvents.length; a < c; a++) { d = this.backgroundEvents[a]; d.index = a; var e = this.backgroundEventTemplateElem.clone(); d.elem = e; e.data("index", d.index); d.titleElem = e.find(".title"); d.titleElem.text(d.Title); e.prop("title", d.Title); d.timeSpanElem = e.find(".timeSpan"); b.wellcome.timeline.provider.setEventStartDate(d); b.wellcome.timeline.provider.setEventEndDate(d); this.backgroundEventsElem.append(e); e = d.startDate.diff(this.startDate, "days"); d.startPosition = normalise(e, 0, this.days); e = d.endDate.diff(this.startDate, "days"); d.endPosition = normalise(e, 0, this.days) } }, _createEvents: function () { var a = this, c, d, e; c = moment(); a.endDate.year() >= c.year() && a.events.push({ isPresent: !0, startDate: c, endDate: c, Title: b.wellcome.timeline.options.config.MainPanelView.PresentDay, Priority: 1 }); c = 0; for (d = a.events.length; c < d; c++) { e = a.events[c]; e.index = c; var g = a.eventTemplateElem.clone(); e.elem = g; g.data("index", e.index); var h = g.find("img"), j = g.find(".date"), l = g.find(".title"); e.ThumbnailPath ? (g.removeClass("min"), h.prop("src", e.ThumbnailPath)) : g.addClass("min"); l.text(e.Title); l.ellipsis(45); e.isPresent ? (j.text(e.startDate.year()), g.addClass("present")) : (j.text(e.StartDisplayYear), g.prop("title", e.StartDisplayYear + ": " + e.Title), g.on("click", function () { if (!a.isNavigating && !a.isZooming) { var c = parseInt(b(this).data("index")); a._selectEvent(c) } }), g.on("mouseenter", function () { if (!a.isNavigating && !a.isZooming) { var c = b(this).data("index"); a._highlightEvent(c) } }), g.on("mouseleave", function () { if (!a.isNavigating && !a.isZooming) { var c = b(this).data("index"); a._unhighlightEvent(c) } }), b.wellcome.timeline.provider.setEventStartDate(e), b.wellcome.timeline.provider.setEventEndDate(e)); a.eventsElem.append(g); g = e.startDate.diff(a.startDate, "days"); e.position = normalise(g, 0, a.days); e.width = e.elem.outerWidth(); e.elem.hide() } a.eventStack = []; c = 0; for (d = b.wellcome.timeline.provider.options.eventStackSize; c < d; c++) a.eventStack.push([]); c = g = 0; for (d = a.events.length; c < d; c++) e = a.events[c], e.stackLevel = g, a.eventStack[g].push(e), g == b.wellcome.timeline.provider.options.eventStackSize - 1 ? g = 0 : g++ }, _createTicks: function () { var a, b, d; a = this.startDate.year(); for (b = this.endDate.year() ; a < b; a++) d = { startYear: a, endYear: a }, this._associateEventsWithTick(d), this.yearTicks.ticks.push(d); this.yearTicks.elem = this.yearTicksElem; this._createTickElems(this.yearTicks); if (this.decades) { a = this._getDecade(this.startDate); for (b = this._getDecade(this.endDate) ; a < b; a += 10) d = { startYear: a, endYear: a + 9 }, this._associateEventsWithTick(d), this.decadeTicks.ticks.push(d); this.decadeTicks.elem = this.decadeTicksElem; this._createTickElems(this.decadeTicks) } if (this.centuries) { a = this._getCentury(this.startDate); for (b = this._getCentury(this.endDate) ; a < b; a += 100) d = { startYear: a, endYear: a + 99 }, this._associateEventsWithTick(d), this.centuryTicks.ticks.push(d); this.centuryTicks.elem = this.centuryTicksElem; this._createTickElems(this.centuryTicks) } }, _createTickElems: function (a) { for (var c = this, d = 0, e = a.ticks.length; d < e; d++) { var g = a.ticks[d], h = c.tickTemplateElem.clone(); g.elem = h; g.elem.find(".date").append(g.startYear); for (var h = g.elem.find(".events"), j = 0, l = g.events.length; j < l; j++) { var m = g.events[j], n = c.tickEventTemplateElem.clone(); n.data("index", m.index); n.attr("title", m.StartDisplayYear + ": " + m.Title); n.on("click", function () { if (!c.isNavigating && !c.isZooming) { var a = b(this).data("index"); c._selectEvent(a) } }); n.on("mouseenter", function () { if (!c.isNavigating && !c.isZooming) { var a = b(this).data("index"); c._highlightEvent(a) } }); n.on("mouseleave", function () { if (!c.isNavigating && !c.isZooming) { var a = b(this).data("index"); c._unhighlightEvent(a) } }); h.append(n) } a.elem.append(g.elem) } }, _associateEventsWithTick: function (a) { a.events = []; for (var b = 0, d = this.events.length; b < d; b++) { var e = this.events[b]; if (e.isPresent) break; var g = e.startDate.year(); g >= a.startYear && g <= a.endYear && a.events.push(e) } }, _setEventsZIndex: function (a) { for (var b = 0, d = this.events.length; b < d; b++) { var e = this.events[b]; null != a ? e.stackLevel == a && this._setEventZIndex(e) : this._setEventZIndex(e) } }, _setEventZIndex: function (a) { var b = parseInt(this.eventsElem.css("zIndex")) + 2 * a.stackLevel + 1; a.elem.css("zIndex", b) }, _setCurrentEventToTop: function () { this._getCurrentEvent() && this._setEventToTop(this._getCurrentEvent()) }, _setEventToTop: function (a) { this._setEventsZIndex(a.stackLevel); var b = parseInt(a.elem.css("zIndex")) + 1; a.elem.css("zIndex", b) }, _updateNavigationAvailability: function () { b.wellcome.timeline.isMinZoom = this._isMinZoom(); b.wellcome.timeline.isMaxZoom = this._isMaxZoom() }, _updateVisibleEvents: function () { var a, b, d; a = 0; for (b = this.events.length; a < b; a++) d = this.events[a], d.isVisible = !0; if (!this._isMaxZoom()) { a = 0; for (b = this.eventStack.length; a < b; a++) this._updateStackLevelVisibleEvents(this.eventStack[a]) } }, _updateStackLevelVisibleEvents: function (a) { for (var b = 0, d = a.length; b < d; b++) { var e = a[b]; if (e.isVisible) for (var g = e.leftPos + e.width + 10, h = b + 1, j = a.length; h < j; h++) { var l = a[h]; if (l.isVisible) if (l.leftPos < g) if (l.Priority > e.Priority) l.isVisible = !1; else if (l.Priority < e.Priority) { e.isVisible = !1; break } else l.isVisible = !1; else break } } }, _showVisibleEvents: function (a) { for (var c = b(), d = b(), e = 0, g = this.events.length; e < g; e++) { var h = this.events[e]; h.isVisible ? c = c.add(h.elem) : d = d.add(h.elem) } b.when(c.fadeIn(b.wellcome.timeline.options.eventFadeDuration), d.fadeOut(b.wellcome.timeline.options.eventFadeDuration)).then(function () { a() }) }, _getCurrentEvent: function () { return b.wellcome.timeline.getCurrentEvent() }, _updateVisibleTicks: function () { for (var a = 0, c = this.currentTicks.ticks.length; a < c; a++) for (var d = this.currentTicks.ticks[a].elem.find(".events .tickEvent"), e = 0, g = d.length; e < g; e++) { var h = b(d[e]); b.wellcome.timeline.getEventByIndex(h.data("index")).isVisible ? (h.addClass("available"), h.removeClass("hidden")) : (h.removeClass("available"), h.addClass("hidden")) } }, _selectEvent: function (a) { b.wellcome.timeline.currentIndex != a && this._trigger("onSelectEvent", null, a) }, _selectTickEvent: function (a) { this._getTickEventElem(a).addClass("selected"); this._isMaxZoom() && this._setEventToTop(a) }, _getTickEventElem: function (a) { for (var c = 0, d = this.currentTicks.ticks.length; c < d; c++) for (var e = this.currentTicks.ticks[c].elem.find(".tickEvent"), g = 0, h = e.length; g < h; g++) { var j = b(e[g]), l = b.wellcome.timeline.getEventByIndex(j.data("index")); if (a === l) return j } return null }, _navigateToEvent: function (a) { var c = this; c.isNavigating = !0; c._trigger("onStartNavigating"); var d = Math.floor(c._getContentWidth() * c._getCurrentScrollPosition()), e = c._getEventScrollPosition(a.index), g; g = b.wellcome.timeline.lastIndex < b.wellcome.timeline.currentIndex ? -1 : 1; d == e && (e = d + g); var h = Math.abs(d - e), h = clamp(h, 750, 1250); c._trigger("onStartScroll", null, g.toString()); b({ val: d }).animate({ val: e }, { duration: 0.6 * h, easing: "easeInOutCubic", step: function () { c._scrollToPosition(Math.floor(this.val)); var a = normalise(this.val, d, e); c._trigger("onScrollStep", null, { direction: g.toString(), pos: a.toString() }) }, complete: function () { c._trigger("onFinishScroll", null, g.toString()); c._zoomUntilVisible(a, function () { c._refresh(function () { c.isNavigating = !1; c._trigger("onFinishNavigating"); c._trigger("onFinishZoom"); c._trigger("onSelectEventComplete", null, a.index) }) }) } }) }, _zoomIn: function () { var a = this; a._zoom(1, function () { a._refresh(function () { a._trigger("onFinishZoom") }) }) }, _zoomOut: function () { var a = this; a._zoom(-1, function () { a._refresh(function () { a._trigger("onFinishZoom") }) }) }, _zoomUntilVisible: function (a, b) { var d = this; a.isVisible ? b() : d._refresh(function () { a.isVisible ? b() : d._zoom(1, function () { d._zoomUntilVisible(a, b) }) }) }, _zoom: function (a, c) { var d = this; if (d._canZoom(a)) { d.isZooming = !0; d._trigger("onStartZoom"); d.currentZoomLevel += a; var e = d._getCurrentScrollPosition(), g = d._getNextZoomWidth(a), h = b.wellcome.timeline.currentIndex; d.contentElem.animate({ width: g }, { step: function () { var a; a = -1 != h ? d._getEventScrollPosition(h) : Math.floor(d._getContentWidth() * e); d._scrollToPosition(a); d._redraw(!0, !0) }, easing: "easeInOutCubic", duration: b.wellcome.timeline.provider.options.zoomAnimationDuration, complete: function () { d.isZooming = !1; d.hasZoomed = !0; d._redraw(!1, !1); c && c() } }) } }, _resize: function () { this.scrollElem.width(this.element.width() - parseInt(this.scrollElem.css("margin-left")) - parseInt(this.scrollElem.css("margin-right"))); this.contentElem.width(this.element.width()); this._redraw(!1, !1); this._refresh(null, !0) }, _redraw: function (a, b) { this._drawBackgroundEvents(); this._drawEvents(a, b); this._drawTicks(); this.scroll.refresh() }, _refresh: function (a, b) { var d = this; if (!b) if (d.hasZoomed) d.hasZoomed = !1; else { null === d.lastZoomLevel && (d.lastZoomLevel = d.currentZoomLevel); d._selectCurrentEvent(); a && a(); return } d._updateVisibleEvents(); d._setEventsZIndex(); d._updateVisibleTicks(); d._showVisibleEvents(function () { d._updateNavigationAvailability(); d._selectCurrentEvent(); d._trigger("onRefreshed"); a && a() }) }, _selectCurrentEvent: function () { this.eventsElem.find(".event").removeClass("highlighted"); this.timeElem.find(".tickEvent").removeClass("highlighted"); var a = this._getCurrentEvent(); a && (this._setEventToTop(a), a.elem.addClass("selected"), this._selectTickEvent(a)) }, _drawBackgroundEvents: function () { for (var a = this._getContentWidth(), b = 0, d = this.backgroundEvents.length; b < d; b++) { var e = this.backgroundEvents[b], g = Math.ceil(e.startPosition * a), h = Math.ceil(e.endPosition * a) - g; e.elem.css({ left: g + "px", width: h + "px" }); e.titleElem.ellipsisFill(e.Title) } }, _drawEvents: function (a, b) { for (var d = this._getContentWidth(), e = this._getScrollWidth(), g = 0, h = this.events.length; g < h; g++) { var j = this.events[g], l = Math.ceil(j.position * d); j.leftPos = l; if (!b || j.isVisible) { if (a) { var m = -1 * this.scroll.x; if (l < m - 300 || l > m + e) { j.clipped || j.elem.css({ left: "-300px" }); j.clipped = !0; continue } } j.clipped = !1; j.top || (j.top = j.elem.outerHeight(!0) * j.stackLevel); j.elem.css({ left: l + "px", top: j.top }); j.lineHeight || (l = j.elem.find(".line"), j.lineHeight = this.eventsElem.height() - j.top - parseInt(j.elem.css("margin-top")) - parseInt(j.elem.height()) - (j.isPresent ? 9 : 7), l.height(j.lineHeight)) } } }, _drawTicks: function () { var a = this._getContentWidth(), c; c = a / this.centuries <= b.wellcome.timeline.provider.options.maxCenturyIntervalWidth ? this.centuryTicks : a / this.decades <= b.wellcome.timeline.provider.options.maxDecadeIntervalWidth ? this.decadeTicks : this.years < b.wellcome.timeline.provider.options.maxTicks ? this.yearTicks : this.decadeTicks; if (c !== this.currentTicks) switch (null != this.currentTicks && this.currentTicks.elem.hide(), this.currentTicks = c, c) { case this.yearTicks: this.yearTicks.elem.show(); break; case this.decadeTicks: this.decadeTicks.elem.show(); break; case this.centuryTicks: this.centuryTicks.elem.show() } a /= c.ticks.length; this.tickMargin || (this.tickMargin = parseInt(c.elem.find(".tick").first().css("margin-left"))); for (var a = a - this.tickMargin, d = 0, e = c.ticks.length; d < e; d++) c.ticks[d].elem.width(a) }, _isMaxZoom: function () { return !this._canZoom(1) ? !0 : !1 }, _isMinZoom: function () { return !this._canZoom(-1) ? !0 : !1 }, _getCurrentScrollPosition: function () { return normalise(this.scroll.x, 0, this._getContentWidth()) }, _scrollToPosition: function (a) { var b = -1 * (this._getContentWidth() - this._getScrollWidth()); a = clamp(a, b, 0); this.scroll.scrollTo(a, 0) }, _getEventScrollPosition: function (a) { return -1 * Math.floor(this.events[a].position * this._getContentWidth() - this._getScrollWidth() / 2 + 100) }, _highlightEvent: function (a) { this.isZooming || (a = this.events[a], a.elem.addClass("highlighted"), this._getTickEventElem(a).addClass("highlighted"), this._isMaxZoom() && this._setEventToTop(a)) }, _unhighlightEvent: function (a) { this.isZooming || (a = this.events[a], a.elem.removeClass("highlighted"), this._getTickEventElem(a).removeClass("highlighted"), this._isMaxZoom() && (this._setEventZIndex(a), this._getCurrentEvent() && this._setEventToTop(this._getCurrentEvent()))) }, _getNextZoomWidth: function (a) { var c = this.contentElem.width(); a = Math.pow(b.wellcome.timeline.provider.options.zoomFactor, a); return c * a }, _canZoom: function (a) { a = this._getNextZoomWidth(a); return a < this.scrollElem.width() || a > this._getMaxWidth() ? !1 : !0 }, _getMaxWidth: function () { var a = b.wellcome.timeline.provider.options.maxYearIntervalWidth, c = b.wellcome.timeline.provider.options.maxDecadeIntervalWidth; return this.years > b.wellcome.timeline.provider.options.maxTicks ? c * this.decades : a * this.years }, _getContentWidth: function () { return this.contentElem.width() }, _getScrollWidth: function () { return this.scrollElem.width() }, _getDecade: function (a) { return 10 * Math.floor(a.year() / 10) }, _getCentury: function (a) { return 100 * Math.floor(a.year() / 100) }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_footerPanelView", { _create: function () { var a = this; b.wellcome.timeline.bind(b.wellcome.timeline.TOGGLE_FULLSCREEN, function (b, d) { a._toggleFullScreen(d) }); a.optionsContainerElem = b('<div class="options"></div>'); a.element.append(a.optionsContainerElem); a.embedButtonElem = b('<a class="imageButton embed"></a>'); a.optionsContainerElem.append(a.embedButtonElem); a.fullScreenButtonElem = b('<a class="imageButton fullScreen"></a>'); a.optionsContainerElem.append(a.fullScreenButtonElem); a.fullScreenButtonElem.click(function (b) { b.preventDefault(); a._trigger("onToggleFullScreen") }); a.embedButtonElem.click(function (b) { b.preventDefault(); a._trigger("onEmbed") }); b.wellcome.timeline.isEmbedEnabled() || a.embedButtonElem.hide() }, _toggleFullScreen: function (a) { a ? (this.fullScreenButtonElem.removeClass("fullScreen"), this.fullScreenButtonElem.addClass("normal")) : (this.fullScreenButtonElem.removeClass("normal"), this.fullScreenButtonElem.addClass("fullScreen")) }, _init: function () { }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_baseDialogueView", { _create: function () { var a = this; a.isActive = !1; a.allowClose = !0; b.wellcome.timeline.bind(b.wellcome.timeline.RESIZE, function () { a._resize() }); b.wellcome.timeline.bind(b.wellcome.timeline.ESCAPE, function () { a.isActive && a.allowClose && a.close() }); b.wellcome.timeline.bind(b.wellcome.timeline.CLOSE_ACTIVE_DIALOGUE, function () { a.isActive && a.allowClose && a.close() }); a.topElem = b('<div class="top"></div>'); a.element.append(a.topElem); a.closeButtonElem = b('<div class="close"></div>'); a.topElem.append(a.closeButtonElem); a.middleElem = b('<div class="middle"></div>'); a.element.append(a.middleElem); a.contentElem = b('<div class="content"></div>'); a.middleElem.append(a.contentElem); a.bottomElem = b('<div class="bottom"></div>'); a.element.append(a.bottomElem); a.closeButtonElem.click(function (b) { b.preventDefault(); a.close() }) }, enableClose: function () { this.allowClose = !0; this.closeButtonElem.show() }, disableClose: function () { this.allowClose = !1; this.closeButtonElem.hide() }, setArrowPosition: function () { var a = parseInt(this.element.css("padding-left")), a = b.wellcome.timeline.mouseX - a - 10; 0 > a && (a = 0); this.bottomElem.css("backgroundPosition", a + "px 0px") }, open: function () { this.element.show(); this.setArrowPosition(); this.isActive = !0 }, close: function () { this.isActive && (this.element.hide(), this.isActive = !1, this._trigger("onClose")) }, _resize: function () { }, _init: function () { }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_genericDialogueView", { _create: function () { }, _init: function () { }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_embedView", b.wellcome.timeline_baseDialogueView, { embedScriptTemplate: '<div class="timeline" data-uri="{0}" data-eventid="{1}" style="width:{2}px; height:{3}px; background-color: #000"></div>\n<script type="text/javascript" src="{4}">\x3c/script><script type="text/javascript">/* wordpress fix */\x3c/script>', _create: function () { var a = this; b.wellcome.timeline_baseDialogueView.prototype._create.call(a); b.wellcome.timeline.bind(b.wellcome.timeline.SHOW_EMBED_DIALOGUE, function () { a.open() }); b.wellcome.timeline.bind(b.wellcome.timeline.HIDE_EMBED_DIALOGUE, function () { a.close() }); b.wellcome.timeline.bind(b.wellcome.timeline.REFRESHED, function () { a._refresh() }); b.wellcome.timeline.bind(b.wellcome.timeline.START_INDEX_CHANGE, function () { a._refresh() }); a.smallWidth = 600; a.smallHeight = 600; a.mediumWidth = 800; a.mediumHeight = 600; a.largeWidth = 900; a.largeHeight = 900; a.currentWidth = a.smallWidth; a.currentHeight = a.smallHeight; a.titleElem = b("<h1>" + b.wellcome.timeline.options.config.EmbedView.Title + "</h1>"); a.contentElem.append(a.titleElem); a.introElem = b("<p>" + b.wellcome.timeline.options.config.EmbedView.EmbedInstructions + "</p>"); a.contentElem.append(a.introElem); a.codeElem = b('<textarea class="code"></textarea>'); a.contentElem.append(a.codeElem); a.copyToClipboardElem = b('<div class="copyToClipboard"></div>'); a.contentElem.append(a.copyToClipboardElem); a.sizesElem = b('<div class="sizes"></div>'); a.contentElem.append(a.sizesElem); a.smallSizeElem = b('<div class="size small"></div>'); a.sizesElem.append(a.smallSizeElem); a.smallSizeElem.append("<p>" + a.smallWidth + " x " + a.smallHeight + "</p>"); a.smallSizeElem.append('<div class="box"></div>'); a.mediumSizeElem = b('<div class="size medium"></div>'); a.sizesElem.append(a.mediumSizeElem); a.mediumSizeElem.append("<p>" + a.mediumWidth + " x " + a.mediumHeight + "</p>"); a.mediumSizeElem.append('<div class="box"></div>'); a.largeSizeElem = b('<div class="size large"></div>'); a.sizesElem.append(a.largeSizeElem); a.largeSizeElem.append("<p>" + a.largeWidth + " x " + a.largeHeight + "</p>"); a.largeSizeElem.append('<div class="box"></div>'); a.customSizeElem = b('<div class="size custom"></div>'); a.sizesElem.append(a.customSizeElem); a.customSizeElem.append("<p>Custom size</p>"); a.customSizeWrapElem = b('<div class="wrap"></div>'); a.customSizeElem.append(a.customSizeWrapElem); a.customSizeWidthWrapElem = b('<div class="width"></div>'); a.customSizeWrapElem.append(a.customSizeWidthWrapElem); a.customSizeWidthWrapElem.append('<label for="width">Width</label>'); a.customWidthElem = b('<input id="width" type="text" maxlength="5"></input>'); a.customSizeWidthWrapElem.append(a.customWidthElem); a.customSizeWidthWrapElem.append("<span>px</span>"); a.customSizeHeightWrapElem = b('<div class="height"></div>'); a.customSizeWrapElem.append(a.customSizeHeightWrapElem); a.customSizeHeightWrapElem.append('<label for="height">Height</label>'); a.customHeightElem = b('<input id="height" type="text" maxlength="5"></input>'); a.customSizeHeightWrapElem.append(a.customHeightElem); a.customSizeHeightWrapElem.append("<span>px</span>"); a.codeElem.focus(function () { b(this).select() }); a.codeElem.mouseup(function (a) { a.preventDefault() }); a.smallSizeElem.click(function (b) { b.preventDefault(); a.currentWidth = a.smallWidth; a.currentHeight = a.smallHeight; a._refresh() }); a.mediumSizeElem.click(function (b) { b.preventDefault(); a.currentWidth = a.mediumWidth; a.currentHeight = a.mediumHeight; a._refresh() }); a.largeSizeElem.click(function (b) { b.preventDefault(); a.currentWidth = a.largeWidth; a.currentHeight = a.largeHeight; a._refresh() }); a.smallSizeElem.addClass("selected"); a.sizesElem.find(".size").click(function (c) { c.preventDefault(); a.sizesElem.find(".size").removeClass("selected"); b(this).addClass("selected") }); a.customWidthElem.keydown(function (a) { numericalInput(a) }); a.customWidthElem.keyup(function () { a._getCustomSize() }); a.customHeightElem.keydown(function (a) { numericalInput(a) }); a.customHeightElem.keyup(function () { a._getCustomSize() }); a._refresh(); a.element.hide() }, _getCustomSize: function () { this.currentWidth = this.customWidthElem.val(); this.currentHeight = this.customHeightElem.val(); this._refresh() }, _refresh: function () { var a = b.wellcome.timeline.getCurrentEvent(), c = ""; a && (c = a.EventId); this.code = String.format(this.embedScriptTemplate, b.wellcome.timeline.options.dataUri, c, this.currentWidth, this.currentHeight, b.wellcome.timeline.options.embedScriptUri); this.codeElem.val(this.code) }, _resize: function () { }, _init: function () { }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery); (function (b) { b.widget("wellcome.timeline_detailsView", b.wellcome.timeline_baseDialogueView, { isCloseEnabled: !0, isPrevEnabled: !1, isNextEnabled: !1, isNavigating: !1, options: { maxWidth: 950 }, _create: function () { var a = this; b.wellcome.timeline_baseDialogueView.prototype._create.call(a); a.allowClose = !1; b.wellcome.timeline.bind(b.wellcome.timeline.START_ZOOM, function () { a._disableClose(); a._disablePrev(); a._disableNext() }); b.wellcome.timeline.bind(b.wellcome.timeline.FINISH_ZOOM, function () { a._refresh() }); b.wellcome.timeline.bind(b.wellcome.timeline.START_NAVIGATING, function () { a.isNavigating = !0 }); b.wellcome.timeline.bind(b.wellcome.timeline.FINISH_NAVIGATING, function () { a.isNavigating = !1; a._refresh() }); b.wellcome.timeline.bind(b.wellcome.timeline.SHOW_EVENT_DETAILS_DIALOGUE, function () { a.open() }); b.wellcome.timeline.bind(b.wellcome.timeline.HIDE_EVENT_DETAILS_DIALOGUE, function () { a.close() }); b.wellcome.timeline.bind(b.wellcome.timeline.START_SCROLL, function (c, d) { a._disableClose(); a._disablePrev(); a._disableNext(); a._prepEvent(d, a.events[b.wellcome.timeline.currentIndex + 1]) }); b.wellcome.timeline.bind(b.wellcome.timeline.SCROLL_STEP, function (b, d) { a._scroll(parseInt(d.direction), d.pos) }); b.wellcome.timeline.bind(b.wellcome.timeline.FINISH_SCROLL, function () { a.currentDetailsElem = a.nextDetailsElem; a.centerColElem.find(".wrapper").not(a.currentDetailsElem).remove(); a.nextDetailsElem = null }); a.leftColElem = b('<div class="leftCol"></div>'); a.contentElem.append(a.leftColElem); a.prevBtnElem = b('<div class="prev"></div>'); a.leftColElem.append(a.prevBtnElem); a.centerColElem = b('<div class="centerCol"></div>'); a.contentElem.append(a.centerColElem); a.detailsTemplate = b('                <div class="wrapper">                    <div class="centerLeftCol"></div>                    <div class="centerRightCol">                        <div class="text"></div>                    </div>                </div>'); a.rightColElem = b('<div class="rightCol"></div>'); a.contentElem.append(a.rightColElem); a.nextBtnElem = b('<div class="next"></div>'); a.rightColElem.append(a.nextBtnElem); a.prevBtnElem.prop("title", b.wellcome.timeline.options.config.DetailsPanelView.Previous); a.nextBtnElem.prop("title", b.wellcome.timeline.options.config.DetailsPanelView.Next); a.prevBtnElem.on("click", function (c) { c.preventDefault(); a.isPrevEnabled && (0 == b.wellcome.timeline.currentIndex && (a._prepEvent(-1, a.events[0]), b({ val: 0 }).animate({ val: 1 }, { duration: 500, easing: "easeInOutCubic", step: function () { a._scroll(1, this.val) }, complete: function () { a.currentDetailsElem = a.nextDetailsElem; a._refresh() } })), a._trigger("onSelectPrev"), trackEvent("Timeline Interaction", "Prev", "", "")) }); a.nextBtnElem.on("click", function (b) { b.preventDefault(); a.isNextEnabled && (a._trigger("onSelectNext"), trackEvent("Timeline Interaction", "Next", "", "")) }); a.closeButtonElem.off("click").on("click", function (b) { b.preventDefault(); a.isCloseEnabled && a.close() }); a.events = b.wellcome.timeline.provider.data.Events.slice(); a.events.unshift(b.wellcome.timeline.provider.data); a._prepEvent(0, a.events[0]); a.currentDetailsElem = a.nextDetailsElem; a._refresh(); a.open() }, _refresh: function () { if (!this.isNavigating) { this.currentDetailsElem.css("left", 0); var a = b.wellcome.timeline.currentIndex; this._enableClose(); -1 == a ? this._disablePrev() : this._enablePrev(); var c = b.wellcome.timeline.provider.data.Events.length; b.wellcome.timeline.provider.data.Events[c - 1].isPresent && (c -= 1); a == c - 1 ? this._disableNext() : this._enableNext() } }, _resize: function () { var a = b(window), c = a.width() - parseInt(this.element.css("margin-left")) - parseInt(this.element.css("margin-right")); c > this.options.maxWidth && (c = this.options.maxWidth); this.element.width(c); this.element.css({ left: a.width() / 2 - this.element.outerWidth(!0) / 2 }); a = Math.floor(c - this.leftColElem.outerWidth() - this.rightColElem.outerWidth()); this.centerColElem.width(a); this.centerColElem.find(".wrapper").width(a); var a = Math.floor(this.centerLeftColElem.outerWidth(!0)), a = Math.floor(this.centerColElem.width() - a), c = Math.floor(parseInt(this.centerRightColElem.css("margin-left"))), d = Math.floor(parseInt(this.centerRightColElem.css("margin-right"))); this.centerRightColElem.width(a - (c + d) - 10) }, _prepEvent: function (a, c) { this.nextDetailsElem = this.detailsTemplate.clone(); var d = this.nextDetailsElem.find(".centerLeftCol"), e = b("<img />"); c.FeatureImagePath ? e.prop("src", c.FeatureImagePath) : e.prop("src", b.wellcome.timeline.provider.data.FeatureImagePath); d.append(e); var d = this.nextDetailsElem.find(".text"), e = b("<header></header>"), g = "<h1>" + c.Title + "</h1>"; if (c.StartDisplay) { var h = c.StartDisplay; c.EndDisplay && (h += " - " + c.EndDisplay); g += "<h2>" + h + "</h2>" } e.html(g); d.append(e); g = b("<section></section>"); g.html(c.Body); c.LinkText && c.LinkTarget && g.append('<p><a class="action" href="' + c.LinkTarget + '">' + c.LinkText + "</a></p>"); c.ImageCredit && g.append("<p><em>" + c.ImageCredit + "</em></p>"); g.find("a").prop("target", "_blank"); d.append(e); d.append(g); this.centerColElem.append(this.nextDetailsElem); this.currentDetailsElem && this.nextDetailsElem.css("left", this.nextDetailsElem.width() * a); this.centerLeftColElem = this.nextDetailsElem.find(".centerLeftCol"); this.centerRightColElem = this.nextDetailsElem.find(".centerRightCol"); this._resize() }, _scroll: function (a, b) { if (this.currentDetailsElem) { var d = this.contentElem.width() * a; this.currentDetailsElem.css("left", d * b); d = this.contentElem.width() * (-1 * a) * (1 - b); this.nextDetailsElem.css("left", d) } }, _disableClose: function () { this.isCloseEnabled = !1; this.closeButtonElem.addClass("disabled") }, _enableClose: function () { this.isCloseEnabled = !0; this.closeButtonElem.removeClass("disabled") }, _disablePrev: function () { this.isPrevEnabled = !1; this.prevBtnElem.addClass("disabled") }, _enablePrev: function () { this.isPrevEnabled = !0; this.prevBtnElem.removeClass("disabled") }, _disableNext: function () { this.isNextEnabled = !1; this.nextBtnElem.addClass("disabled") }, _enableNext: function () { this.isNextEnabled = !0; this.nextBtnElem.removeClass("disabled") }, _init: function () { }, _destroy: function () { b.Widget.prototype.destroy.apply(this, arguments) } }) })(jQuery);
